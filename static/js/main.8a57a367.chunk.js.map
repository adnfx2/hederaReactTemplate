{"version":3,"sources":["assets/hedera-logo.svg","components/Header/index.js","components/Wallet/AccountListItem.js","hashgraph-lib/accountsManager.js","components/Wallet/AccountsList.js","components/Wallet/TokenBalance.js","hashgraph-lib/balanceQuery.js","components/Wallet/TokenRequest.js","components/Wallet/AccountID.js","components/Wallet/NetworkSelector.js","components/Wallet/index.js","material-ui/DarkThemeProvider.js","App.js","index.js","hashgraph-lib/clientProvider.js","components/Wallet/TokenSend.js","hashgraph-lib/transactionCreator.js"],"names":["useStyles","makeStyles","logo","maxWidth","paddingRight","Header","classes","AppBar","position","color","elevation","Toolbar","src","hederaLogo","alt","className","Typography","variant","theme","listItem","minWidth","deleteButton","palette","error","dark","AddAccountItem","handleAddAccount","useState","showAddAccount","setShowAddAccount","accountId","setAccountId","privateKey","setPrivateKey","handleCloseAddAccount","disableSubmit","ListItem","button","onClick","ListItemAvatar","Avatar","ListItemText","primary","Dialog","open","onClose","DialogTitle","DialogContent","TextField","margin","required","fullWidth","id","label","name","onChange","e","value","target","DialogActions","Button","disabled","type","AccountListItem","walletKeys","handleSelectAccount","handleDeleteAccount","props","seed","accountsReducer","state","action","accountsList","newAccount","payload","accountIdToDelete","filteredAccountsList","filter","accountSelected","Error","AccountsManagerStateContext","createContext","AccountsManagerDispatcherContext","AccountsManagerProvider","children","defaultState","process","useReducer","dispatch","dispatcher","deleteAccount","addAccount","selectAccount","Provider","AccountsList","showAccounts","setShowAccounts","handleCloseAccountsList","accountsManagerDispatcher","context","useContext","undefined","useAccountsManagerDispatcher","align","List","map","wallet","useRefreshBalance","retry","client","useHederaClient","accountBalance","setAccountBalance","requestBalance","a","console","warn","AccountBalanceQuery","execute","requestedBalance","hbars","toString","useBalanceQuery","useEffect","TokenBalance","refreshBalanceFlag","triggerRefreshBalance","Container","Tooltip","title","arrow","CircularProgress","qrCode","width","height","TokenRequest","openSenderModal","setOpenSenderModal","tooltipValue","setTooltipValue","endIcon","utilFlexCenter","level","includeMargin","renderAs","setTimeout","text","onCopy","AccountID","Grid","container","spacing","justify","alignItems","item","NetworkSelector","walletContent","padding","utilSpread","display","justifyContent","Wallet","useAccountsManagerState","setRefreshBalanceFlag","prevState","Card","CardContent","Divider","TokenSend","darkPalette","DarkThemeProvider","darkTheme","useMemo","createMuiTheme","ThemeProvider","CssBaseline","App","ReactDOM","render","document","getElementById","HederaClientContext","HederaClientProvider","hederaClient","setHederaClient","Client","forTestnet","setOperator","log","TokenSender","tokenAmount","setTokenAmount","toAddress","setToAddress","useTransactionCreator","transactionState","broadcastTransaction","toast","info","transactionRecord","transactionHash","readableHash","Buffer","from","blockExplorerLink","success","rel","href","useNotifications","closeSender","handleOnSubmit","sender","receiver","onSubmit","noValidate","size","setTransactionState","transactionDetails","valueOut","valueIn","TransferTransaction","addHbarTransfer","Hbar","fromTinybars","transactionResponse","getRecord"],"mappings":"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","file":"static/js/main.8a57a367.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hedera-logo.18b7f40e.svg\";","import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport hederaLogo from \"../../assets/hedera-logo.svg\";\n\nconst useStyles = makeStyles({\n  logo: {\n    maxWidth: 64,\n    paddingRight: 10,\n  },\n});\n\nconst Header = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\" color=\"default\" elevation={0}>\n      <Toolbar>\n        <img src={hederaLogo} alt=\"Hedera\" className={classes.logo} />\n        <Typography variant=\"h6\">HEDERA TEMPLATE</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Blockies from \"react-blockies\";\n\nconst useStyles = makeStyles((theme) => ({\n  listItem: {\n    minWidth: 240,\n  },\n  deleteButton: {\n    \"&:hover\": {\n      color: theme.palette.error.dark,\n    },\n  },\n}));\n\nconst AccountListItem = ({\n  walletKeys,\n  handleSelectAccount,\n  handleDeleteAccount,\n  ...props\n}) => {\n  const classes = useStyles();\n  const { accountId } = walletKeys;\n\n  return (\n    <ListItem\n      className={classes.listItem}\n      button\n      onClick={() => handleSelectAccount(walletKeys)}\n      key={accountId}\n      {...props}\n    >\n      <ListItemAvatar>\n        <Avatar>\n          <Blockies seed={accountId} />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText primary={accountId} />\n      <DeleteIcon\n        className={classes.deleteButton}\n        onClick={handleDeleteAccount}\n      />\n    </ListItem>\n  );\n};\n\nexport const AddAccountItem = ({ handleAddAccount }) => {\n  const [showAddAccount, setShowAddAccount] = useState(false);\n  const [accountId, setAccountId] = useState(\"\");\n  const [privateKey, setPrivateKey] = useState(\"\");\n  const handleOpenAddAccount = () => setShowAddAccount(true);\n  const handleCloseAddAccount = () => setShowAddAccount(false);\n\n  const handleAccountField = (e) => {\n    const value = e.target.value;\n    setAccountId(value);\n  };\n\n  const handlePrivateKeyField = (e) => {\n    const value = e.target.value;\n    setPrivateKey(value);\n  };\n\n  const handleOnSubmit = () => {\n    handleAddAccount(accountId, privateKey);\n    setAccountId(\"\");\n    setPrivateKey(\"\");\n    handleCloseAddAccount();\n  };\n\n  const disableSubmit = !(accountId && privateKey);\n\n  return (\n    <>\n      <ListItem button onClick={handleOpenAddAccount}>\n        <ListItemAvatar>\n          <Avatar>\n            <AddIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary=\"Add account\" />\n      </ListItem>\n      <Dialog open={showAddAccount} onClose={handleCloseAddAccount}>\n        <DialogTitle>Add account</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"accoundId\"\n            label=\"Hedera account ID\"\n            name=\"AccountId\"\n            onChange={handleAccountField}\n            value={accountId}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"privateKey\"\n            label=\"Private Key\"\n            name=\"PrivateKey\"\n            onChange={handlePrivateKeyField}\n            value={privateKey}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={disableSubmit}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={handleOnSubmit}\n          >\n            Done!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default AccountListItem;\n","import { useReducer, useContext, createContext } from \"react\";\n\nexport const getDevAccount = () => {\n  const devAccountId = process.env.REACT_APP_MY_ACCOUNT_ID;\n  const devPrivateKey = process.env.REACT_APP_MY_PRIVATE_KEY;\n  if (!devAccountId || !devPrivateKey) {\n    console.warn(\"Hedera testing account not present\");\n    return;\n  }\n  return { accountId: devAccountId, privateKey: devPrivateKey };\n};\n\nconst accountsReducer = (state, action) => {\n  switch (action.type) {\n    case \"accountAdded\": {\n      const { accountsList } = state;\n      const newAccount = action.payload;\n      return { ...state, accountsList: [...accountsList, newAccount] };\n    }\n    case \"accountDeleted\": {\n      const { accountsList } = state;\n      const accountIdToDelete = action.payload;\n      const filteredAccountsList = accountsList.filter(\n        ({ accountId }) => accountId !== accountIdToDelete\n      );\n      return { ...state, accountsList: filteredAccountsList };\n    }\n    case \"accountSelectionChanged\": {\n      const accountSelected = action.payload || {};\n      return { ...state, accountSelected };\n    }\n    default: {\n      throw new Error(`Unhandled actionType: ${action.type}`);\n    }\n  }\n};\n\nconst AccountsManagerStateContext = createContext();\nconst AccountsManagerDispatcherContext = createContext();\n\nexport const AccountsManagerProvider = ({ children }) => {\n  const devAccount = getDevAccount();\n\n  const defaultState = {\n    accountSelected: {},\n    accountsList: [devAccount],\n  };\n\n  const [state, dispatch] = useReducer(accountsReducer, defaultState);\n\n  const dispatcher = {\n    deleteAccount: (accountId) => {\n      dispatch({\n        type: \"accountDeleted\",\n        payload: accountId,\n      });\n    },\n    addAccount: (walletKeys) => {\n      dispatch({\n        type: \"accountAdded\",\n        payload: walletKeys,\n      });\n    },\n    selectAccount: (walletKeys) => {\n      dispatch({\n        type: \"accountSelectionChanged\",\n        payload: walletKeys,\n      });\n    },\n  };\n\n  return (\n    <AccountsManagerStateContext.Provider value={state}>\n      <AccountsManagerDispatcherContext.Provider value={dispatcher}>\n        {children}\n      </AccountsManagerDispatcherContext.Provider>\n    </AccountsManagerStateContext.Provider>\n  );\n};\n\nexport const useAccountsManagerState = () => {\n  const context = useContext(AccountsManagerStateContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useAccountsManagerState must be used whithin AccountsManagerProvider\"\n    );\n  }\n  return context;\n};\n\nexport const useAccountsManagerDispatcher = () => {\n  const context = useContext(AccountsManagerDispatcherContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useAccountsManagerDispatch must be used whithin AccountsManagerProvider\"\n    );\n  }\n  return context;\n};\n","import { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport List from \"@material-ui/core/List\";\nimport AccountListItem, { AddAccountItem } from \"./AccountListItem\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport { useAccountsManagerDispatcher } from \"../../hashgraph-lib/accountsManager\";\n\nconst AccountsList = ({ accountId, accountsList }) => {\n  const [showAccounts, setShowAccounts] = useState(false);\n  const handleOpenAccountsList = () => setShowAccounts(true);\n  const handleCloseAccountsList = () => setShowAccounts(false);\n  const accountsManagerDispatcher = useAccountsManagerDispatcher();\n\n  const handleSelectAccount = (walletKeys) => {\n    accountsManagerDispatcher.selectAccount(walletKeys);\n    handleCloseAccountsList();\n  };\n\n  const handleDeleteAccount = (accountId) => {\n    accountsManagerDispatcher.deleteAccount(accountId);\n  };\n\n  const handleAddAccount = (walletKeys) => {\n    accountsManagerDispatcher.addAccount(walletKeys);\n  };\n\n  return (\n    <>\n      {accountId ? (\n        <Button\n          onClick={() => handleSelectAccount()}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          Disconnect\n        </Button>\n      ) : (\n        <Button\n          onClick={handleOpenAccountsList}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Connect\n        </Button>\n      )}\n      <Dialog onClose={handleCloseAccountsList} open={showAccounts}>\n        <DialogTitle align=\"center\">Accounts</DialogTitle>\n        <DialogContent>\n          <List>\n            {accountsList.map((wallet) => (\n              <AccountListItem\n                key={wallet.accountId}\n                handleSelectAccount={handleSelectAccount}\n                handleDeleteAccount={handleDeleteAccount}\n                walletKeys={wallet}\n              />\n            ))}\n            <AddAccountItem handleAddAccount={handleAddAccount} />\n          </List>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default AccountsList;\n","import { useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useBalanceQuery } from \"../../hashgraph-lib/balanceQuery\";\nimport { useHederaClient } from \"../../hashgraph-lib/clientProvider\";\n\nconst useRefreshBalance = (accountId, retry) => {\n  const { client } = useHederaClient();\n  const { accountBalance, requestBalance } = useBalanceQuery(client);\n  useEffect(() => {\n    requestBalance(accountId);\n  }, [client, accountId, retry]);\n  return accountBalance;\n};\n\nconst TokenBalance = ({\n  accountId,\n  refreshBalanceFlag,\n  triggerRefreshBalance,\n}) => {\n  const accountBalance = useRefreshBalance(accountId, refreshBalanceFlag);\n\n  const handleClickToRefreshBalance = () => {\n    if (!accountId) return;\n    if (accountBalance === \"loading\") return;\n    triggerRefreshBalance();\n  };\n\n  return (\n    <Container>\n      <Tooltip title=\"Click To Refresh Balance\" arrow>\n        <Typography\n          align=\"center\"\n          variant=\"h5\"\n          onClick={handleClickToRefreshBalance}\n        >\n          {accountBalance === \"loading\" && <CircularProgress />}\n          {accountBalance === \"error\" && \"error\"}\n          {accountBalance?.value && `${accountBalance.value}`}\n        </Typography>\n      </Tooltip>\n    </Container>\n  );\n};\n\nexport default TokenBalance;\n","import { useState } from \"react\";\nimport { AccountBalanceQuery } from \"@hashgraph/sdk\";\n\nexport const useBalanceQuery = (client) => {\n  const [accountBalance, setAccountBalance] = useState();\n\n  const requestBalance = async (accountId) => {\n    if (!client || !accountId) {\n      console.warn(\"Client and AccountId required to request balance\");\n      setAccountBalance();\n      return;\n    }\n    try {\n      setAccountBalance(\"loading\");\n      const requestedBalance = await new AccountBalanceQuery()\n        .setAccountId(accountId)\n        .execute(client);\n      const value = requestedBalance.hbars.toString();\n      setAccountBalance({ value });\n    } catch (e) {\n      setAccountBalance(\"error\");\n      console.error(\" [Error requesting balance] \", e);\n    }\n  };\n\n  return { accountBalance, requestBalance };\n};\n\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport QRCode from \"qrcode.react\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\n\nconst useStyles = makeStyles(() => ({\n  qrCode: {\n    width: 200,\n    height: 200,\n  },\n}));\n\nconst TokenRequest = ({ accountId }) => {\n  const classes = useStyles();\n  const [openSenderModal, setOpenSenderModal] = useState(false);\n  const [tooltipValue, setTooltipValue] = useState(\"Copy to clipboard\");\n  const closeSender = () => setOpenSenderModal(false);\n  const openSender = () => setOpenSenderModal(true);\n  const handleOnCopy = () => setTooltipValue(\"Copied!\");\n  const handleCloseTooltip = () =>\n    setTimeout(() => setTooltipValue(\"Copy to clipboard\"), 200);\n\n  return (\n    <Container>\n      <Button\n        disabled={!accountId}\n        fullWidth\n        onClick={openSender}\n        variant=\"contained\"\n        color=\"primary\"\n        endIcon={<GetAppIcon />}\n      >\n        Receive\n      </Button>\n      <Dialog\n        className={classes.utilFlexCenter}\n        open={openSenderModal}\n        onClose={closeSender}\n      >\n        <DialogTitle align=\"center\">Public Key</DialogTitle>\n        <DialogContent>\n          <QRCode\n            className={classes.qrCode}\n            value={accountId}\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Tooltip title={tooltipValue} arrow onClose={handleCloseTooltip}>\n            <CopyToClipboard text={accountId} onCopy={handleOnCopy}>\n              <Button fullWidth endIcon={<FileCopyIcon />} variant=\"outlined\">\n                {accountId}\n              </Button>\n            </CopyToClipboard>\n          </Tooltip>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default TokenRequest;\n","import Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Blockies from \"react-blockies\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\n\nconst AccountID = ({ accountId }) => {\n  return (\n    <Container>\n      <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Avatar>\n            {accountId ? <Blockies seed={accountId} /> : <ErrorIcon />}\n          </Avatar>\n        </Grid>\n        <Grid item>\n          <Typography>{accountId || \"Disconnected\"}</Typography>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AccountID;\n","import Button from \"@material-ui/core/Button\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst NetworkSelector = () => {\n  return (\n    <Button variant=\"outlined\" disabled endIcon={<ExpandMoreIcon />}>\n      Testnet\n    </Button>\n  );\n};\n\nexport default NetworkSelector;\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Container from \"@material-ui/core/Container\";\nimport AccountsSelector from \"./AccountsList\";\nimport { HederaClientProvider } from \"../../hashgraph-lib/clientProvider\";\nimport { useAccountsManagerState } from \"../../hashgraph-lib/accountsManager\";\nimport TokenBalance from \"./TokenBalance\";\nimport TokenSend from \"./TokenSend\";\nimport TokenRequest from \"./TokenRequest\";\nimport AccountID from \"./AccountID\";\nimport NetworkSelector from \"./NetworkSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  walletContent: {\n    maxWidth: 555,\n    padding: theme.spacing(8, 2, 6),\n  },\n  utilSpread: { display: \"flex\", justifyContent: \"space-between\" },\n}));\n\nconst Wallet = () => {\n  const { accountSelected, accountsList } = useAccountsManagerState();\n  const [refreshBalanceFlag, setRefreshBalanceFlag] = useState(false);\n  const triggerRefreshBalance = () =>\n    setRefreshBalanceFlag((prevState) => !prevState);\n\n  const classes = useStyles();\n\n  return (\n    <HederaClientProvider accountSelected={accountSelected}>\n      <Container className={classes.walletContent}>\n        <Card>\n          <CardContent className={classes.utilSpread}>\n            <NetworkSelector />\n            <AccountsSelector\n              accountId={accountSelected.accountId}\n              accountsList={accountsList}\n            />\n          </CardContent>\n          <Divider />\n          <CardContent>\n            <AccountID accountId={accountSelected.accountId} />\n          </CardContent>\n          <CardContent>\n            <TokenBalance\n              refreshBalanceFlag={refreshBalanceFlag}\n              triggerRefreshBalance={triggerRefreshBalance}\n              accountId={accountSelected.accountId}\n            />\n          </CardContent>\n          <CardContent className={classes.utilSpread}>\n            <TokenSend\n              triggerRefreshBalance={triggerRefreshBalance}\n              accountId={accountSelected.accountId}\n            />\n            <TokenRequest accountId={accountSelected.accountId} />\n          </CardContent>\n        </Card>\n      </Container>\n    </HederaClientProvider>\n  );\n};\n\nexport default Wallet;\n","import { useMemo } from \"react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst darkPalette = {\n  palette: { type: \"dark\" },\n};\n\nconst DarkThemeProvider = ({ children }) => {\n  const darkTheme = useMemo(() => createMuiTheme(darkPalette), []);\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default DarkThemeProvider;\n","import Header from \"./components/Header\";\nimport Wallet from \"./components/Wallet\";\nimport DarkThemeProvider from \"./material-ui/DarkThemeProvider\";\nimport { AccountsManagerProvider } from \"./hashgraph-lib/accountsManager\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst App = () => {\n  return (\n    <DarkThemeProvider>\n      <AccountsManagerProvider>\n        <Header />\n        <Wallet />\n        <ToastContainer />\n      </AccountsManagerProvider>\n    </DarkThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"fontsource-roboto\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { createContext, useContext, useState, useEffect } from \"react\";\nimport { Client } from \"@hashgraph/sdk\";\n\nconst HederaClientContext = createContext();\n\nexport const useHederaClient = () => {\n  const context = useContext(HederaClientContext);\n\n  if (!context) {\n    throw new Error(\n      \"useHederaClient must be used within a HederaClientProvider\"\n    );\n  }\n  return context;\n};\n\nexport const HederaClientProvider = ({\n  children,\n  accountSelected,\n  ...props\n}) => {\n  const [hederaClient, setHederaClient] = useState({ client: null, error: \"\" });\n  useEffect(() => {\n    if (!accountSelected.accountId) return;\n    try {\n      const { accountId, privateKey } = accountSelected;\n      const client = Client.forTestnet();\n      client.setOperator(accountId, privateKey);\n      setHederaClient({ client, error: \"\" });\n      console.log(\"Client connected\");\n    } catch (e) {\n      console.error(\"HederaClientProvider error\");\n      setHederaClient({ client: null, error: \"Couldn't connect to testnet\" });\n    }\n    return () => console.log(\"Client disconnected\");\n  }, [accountSelected]);\n\n  return (\n    <HederaClientContext.Provider value={hederaClient} {...props}>\n      {children}\n    </HederaClientContext.Provider>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport { useHederaClient } from \"../../hashgraph-lib/clientProvider\";\nimport { useTransactionCreator } from \"../../hashgraph-lib/transactionCreator\";\nimport { toast } from \"react-toastify\";\n\nconst useNotifications = (transactionState) => {\n  useEffect(() => {\n    if (transactionState === \"broadcasting...\") {\n      return toast.info(\"Broadcast transaction...\");\n    }\n    if (transactionState === \"broadcasted!\") {\n      return toast.info(\"Transaction broadcasted!\");\n    }\n    if (transactionState === \"error\") {\n      return toast.error(\"Transaction failed!\");\n    }\n    if (transactionState?.transactionRecord) {\n      const { transactionHash } = transactionState.transactionRecord;\n      const readableHash = Buffer.from(transactionHash).toString(\"hex\");\n      const blockExplorerLink = `https://testnet.dragonglass.me/hedera/search?q=${readableHash}`;\n      return toast.success(\n        <>\n          <Typography>Transaction succeded</Typography>\n          <Link rel=\"noopener\" target=\"_blank\" href={blockExplorerLink}>\n            Go to HederaExplorer\n          </Link>\n        </>\n      );\n    }\n  }, [transactionState]);\n};\n\nconst TokenSender = ({ accountId, triggerRefreshBalance }) => {\n  const [openSenderModal, setOpenSenderModal] = useState(false);\n  const [tokenAmount, setTokenAmount] = useState(\"\");\n  const [toAddress, setToAddress] = useState(\"\");\n  const { client } = useHederaClient();\n  const { transactionState, broadcastTransaction } = useTransactionCreator(\n    client\n  );\n  useNotifications(transactionState);\n\n  const closeSender = () => {\n    setOpenSenderModal(false);\n  };\n\n  const openSender = () => {\n    setOpenSenderModal(true);\n  };\n\n  const handleTokenAmountField = (e) => {\n    const value = e.target.value;\n    setTokenAmount(value);\n  };\n\n  const handleToAddressField = (e) => {\n    const value = e.target.value;\n    setToAddress(value);\n  };\n\n  const handleOnSubmit = () => {\n    const transactionDetails = {\n      sender: { accountId, tokenAmount },\n      receiver: toAddress,\n    };\n    broadcastTransaction(transactionDetails, triggerRefreshBalance);\n    setTokenAmount(\"\");\n    setToAddress(\"\");\n    closeSender();\n  };\n\n  const disableSubmit = !(tokenAmount && toAddress);\n\n  return (\n    <Container>\n      <Button\n        disabled={!accountId}\n        fullWidth\n        onClick={openSender}\n        variant=\"contained\"\n        color=\"primary\"\n        endIcon={<SendIcon />}\n      >\n        Send\n      </Button>\n      <Dialog open={openSenderModal} onClose={closeSender}>\n        <DialogTitle align=\"center\">Send Hbar</DialogTitle>\n        <DialogContent onSubmit={handleOnSubmit} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"amount\"\n            label=\"Amount\"\n            name=\"amount\"\n            onChange={handleTokenAmountField}\n            value={tokenAmount}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"toAddress\"\n            label=\"To address\"\n            name=\"toAddress\"\n            onChange={handleToAddressField}\n            value={toAddress}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={handleOnSubmit}\n            disabled={disableSubmit}\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n          >\n            Send\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default TokenSender;\n","import { useState } from \"react\";\nimport { Hbar, TransferTransaction } from \"@hashgraph/sdk\";\n\nexport const useTransactionCreator = (client) => {\n  const [transactionState, setTransactionState] = useState();\n\n  const broadcastTransaction = async (\n    transactionDetails,\n    triggerRefreshBalance\n  ) => {\n    const { sender, receiver } = transactionDetails;\n    const valueOut = sender.tokenAmount * -1;\n    const valueIn = sender.tokenAmount;\n    try {\n      setTransactionState(\"broadcasting...\");\n      const transactionResponse = await new TransferTransaction()\n        .addHbarTransfer(sender.accountId, Hbar.fromTinybars(valueOut))\n        .addHbarTransfer(receiver, Hbar.fromTinybars(valueIn))\n        .execute(client);\n      setTransactionState(\"broadcasted!\");\n      const transactionRecord = await transactionResponse.getRecord(client);\n      setTransactionState({ transactionRecord });\n    } catch (e) {\n      console.error(\"Tx failed!\", e);\n      setTransactionState(\"error\");\n    }\n    triggerRefreshBalance();\n  };\n\n  return { transactionState, broadcastTransaction };\n};\n"],"sourceRoot":""}